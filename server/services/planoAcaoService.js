const axios = require('axios');
const progressService = require('./progressService');
const { generatePDF } = require('./pdfGenerator');
const Transcricao = require('../models/Transcricao');
const Analise = require('../models/Analise');

/**
 * Servi√ßo para gera√ß√£o de planos de a√ß√£o baseados em transcri√ß√µes e an√°lises
 * Utiliza Claude 3.7 Sonnet via OpenRouter para m√°xima qualidade
 */

// Configura√ß√µes do OpenRouter - usando mesmo modelo da an√°lise de mercado
const OPENROUTER_API_URL = process.env.OPENROUTER_API_URL || 'https://openrouter.ai/api/v1/chat/completions';
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
const OPENROUTER_CLAUDE_MODEL = process.env.OPENROUTER_CLAUDE_MODEL || 'anthropic/claude-sonnet-4';

/**
 * Gera um plano de a√ß√£o baseado em transcri√ß√µes e an√°lises selecionadas
 * @param {Array} transcricaoIds - IDs das transcri√ß√µes selecionadas
 * @param {Array} analiseIds - IDs das an√°lises selecionadas
 * @param {string} clienteId - ID do cliente
 * @param {string} titulo - T√≠tulo do plano de a√ß√£o
 * @returns {Promise<Object>} - Resultado com plano gerado e URL do PDF
 */
async function generateActionPlan(transcricaoIds, analiseIds, clienteId, titulo) {
  try {
    console.log(`\n====== INICIANDO GERA√á√ÉO DE PLANO DE A√á√ÉO ======`);
    console.log(`Cliente: ${clienteId}`);
    console.log(`T√≠tulo: ${titulo}`);
    console.log(`Transcri√ß√µes: ${transcricaoIds.length}`);
    console.log(`An√°lises: ${analiseIds.length}`);
    
    // Validar se h√° pelo menos um documento
    if (transcricaoIds.length === 0 && analiseIds.length === 0) {
      throw new Error('√â necess√°rio selecionar pelo menos uma transcri√ß√£o ou an√°lise');
    }
    
    // Enviar atualiza√ß√£o de progresso inicial
    progressService.sendProgressUpdate(clienteId, {
      percentage: 5,
      message: 'Carregando documentos selecionados...',
      step: 1,
      stepStatus: 'active'
    });
    
    // ETAPA 1: Carregar e processar documentos
    console.log('ETAPA 1: Carregando documentos selecionados');
    const documentos = await loadDocuments(transcricaoIds, analiseIds);
    console.log(`Documentos carregados: ${documentos.transcricoes.length} transcri√ß√µes, ${documentos.analises.length} an√°lises`);
    
    progressService.sendProgressUpdate(clienteId, {
      percentage: 20,
      message: 'Documentos carregados com sucesso',
      step: 1,
      stepStatus: 'completed'
    });
    
    // ETAPA 2: Preparar contexto para o Claude
    progressService.sendProgressUpdate(clienteId, {
      percentage: 25,
      message: 'Preparando contexto para an√°lise...',
      step: 2,
      stepStatus: 'active'
    });
    
    console.log('ETAPA 2: Preparando contexto consolidado');
    const contextoConsolidado = prepareContext(documentos);
    console.log(`Contexto preparado: ${contextoConsolidado.length} caracteres`);
    
    progressService.sendProgressUpdate(clienteId, {
      percentage: 40,
      message: 'Contexto preparado - iniciando an√°lise estrat√©gica',
      step: 2,
      stepStatus: 'completed'
    });
    
    // ETAPA 3: Gerar plano de a√ß√£o com Claude 3.7
    progressService.sendProgressUpdate(clienteId, {
      percentage: 45,
      message: 'Analisando documentos com IA...',
      step: 3,
      stepStatus: 'active'
    });
    
    console.log('ETAPA 3: Gerando plano de a√ß√£o com Claude 3.7');
    const planoAcao = await generatePlanWithClaude37(contextoConsolidado, titulo);
    console.log(`Plano de a√ß√£o gerado: ${planoAcao.length} caracteres`);
    
    // Atualiza√ß√µes de progresso durante a gera√ß√£o
    progressService.sendProgressUpdate(clienteId, {
      percentage: 70,
      message: 'Estruturando plano de a√ß√£o...',
      step: 3,
      stepStatus: 'active'
    });
    
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    progressService.sendProgressUpdate(clienteId, {
      percentage: 85,
      message: 'Plano de a√ß√£o gerado com sucesso',
      step: 3,
      stepStatus: 'completed'
    });
    
    // ETAPA 4: Gerar PDF
    progressService.sendProgressUpdate(clienteId, {
      percentage: 90,
      message: 'Gerando documento PDF...',
      step: 4,
      stepStatus: 'active'
    });
    
    console.log('ETAPA 4: Gerando PDF do plano de a√ß√£o');
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `plano_acao_${clienteId}_${timestamp}`;
    const pdfUrl = await generatePDF(filename, planoAcao);
    console.log(`PDF gerado: ${pdfUrl}`);
    
    progressService.sendProgressUpdate(clienteId, {
      percentage: 99,
      message: 'Plano de a√ß√£o pronto para visualiza√ß√£o',
      step: 4,
      stepStatus: 'completed'
    });
    
    console.log(`\n====== PLANO DE A√á√ÉO GERADO COM SUCESSO ======\n`);
    
    return {
      titulo,
      conteudo: planoAcao,
      pdfUrl,
      documentosBase: {
        transcricoes: transcricaoIds,
        analises: analiseIds
      },
      timestamp: new Date()
    };
    
  } catch (error) {
    console.error('Erro na gera√ß√£o do plano de a√ß√£o:', error);
    throw new Error(`N√£o foi poss√≠vel gerar o plano de a√ß√£o: ${error.message}`);
  }
}

/**
 * Carrega os documentos selecionados do banco de dados
 * @param {Array} transcricaoIds - IDs das transcri√ß√µes
 * @param {Array} analiseIds - IDs das an√°lises
 * @returns {Promise<Object>} - Documentos carregados
 */
async function loadDocuments(transcricaoIds, analiseIds) {
  try {
    const transcricoes = await Transcricao.find({
      _id: { $in: transcricaoIds }
    }).populate('cliente', 'nome cnpj');
    
    const analises = await Analise.find({
      _id: { $in: analiseIds }
    }).populate('cliente', 'nome cnpj');
    
    return {
      transcricoes,
      analises
    };
  } catch (error) {
    console.error('Erro ao carregar documentos:', error);
    throw new Error('Falha ao carregar documentos selecionados');
  }
}

/**
 * Prepara o contexto consolidado para o Claude
 * @param {Object} documentos - Documentos carregados
 * @returns {string} - Contexto formatado
 */
function prepareContext(documentos) {
  let contexto = '';
  
  // Adicionar transcri√ß√µes
  if (documentos.transcricoes.length > 0) {
    contexto += '# TRANSCRI√á√ïES DE REUNI√ïES\n\n';
    documentos.transcricoes.forEach((transcricao, index) => {
      contexto += `## Transcri√ß√£o ${index + 1}: ${transcricao.titulo}\n`;
      contexto += `**Data:** ${transcricao.dataCriacao.toLocaleDateString('pt-BR')}\n`;
      contexto += `**Cliente:** ${transcricao.cliente?.nome || 'N/A'}\n`;
      contexto += `**Dura√ß√£o:** ${Math.floor(transcricao.duracao / 60)} minutos\n\n`;
      contexto += `**Conte√∫do:**\n${transcricao.conteudo}\n\n`;
      contexto += '---\n\n';
    });
  }
  
  // Adicionar an√°lises
  if (documentos.analises.length > 0) {
    contexto += '# AN√ÅLISES DE MERCADO\n\n';
    documentos.analises.forEach((analise, index) => {
      contexto += `## An√°lise ${index + 1}: ${analise.cnpj}\n`;
      contexto += `**Data:** ${analise.dataCriacao.toLocaleDateString('pt-BR')}\n`;
      contexto += `**Cliente:** ${analise.cliente?.nome || 'N/A'}\n\n`;
      contexto += `**Conte√∫do:**\n${analise.conteudo}\n\n`;
      contexto += '---\n\n';
    });
  }
  
  return contexto;
}

/**
 * Gera o plano de a√ß√£o usando Claude 3.7 Sonnet
 * @param {string} contexto - Contexto consolidado dos documentos
 * @param {string} titulo - T√≠tulo do plano
 * @returns {Promise<string>} - Plano de a√ß√£o gerado
 */
async function generatePlanWithClaude37(contexto, titulo) {
  try {
    if (!OPENROUTER_API_KEY) {
      throw new Error('Chave de API do OpenRouter n√£o configurada');
    }
    
    const prompt = buildActionPlanPrompt(contexto, titulo);
    
    console.log('ü§ñ [PLANO-ACAO] Enviando consulta ao Claude Sonnet...');
    console.log(`üìä [PLANO-ACAO] Modelo: ${OPENROUTER_CLAUDE_MODEL}`);
    console.log(`üìù [PLANO-ACAO] Tamanho do prompt: ${prompt.length} caracteres`);
    
    // Tentar com retry em caso de falha
    let lastError;
    const maxRetries = 2;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üîÑ [PLANO-ACAO] Tentativa ${attempt}/${maxRetries}`);
        
        const response = await axios.post(
          OPENROUTER_API_URL,
          {
            model: OPENROUTER_CLAUDE_MODEL,
            messages: [
              { role: 'user', content: prompt }
            ],
            max_tokens: 8000,
            temperature: 0.7
          },
          {
            timeout: 300000, // 5 minutos para prompts grandes
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
              'HTTP-Referer': 'https://janice.analyzer.app',
              'X-Title': 'Janice - Gerador de Planos de A√ß√£o'
            }
          }
        );
        
        console.log('‚úÖ [PLANO-ACAO] Resposta recebida do Claude Sonnet');
        console.log(`üìä [PLANO-ACAO] Status: ${response.status}`);
        console.log(`üìä [PLANO-ACAO] Dados da resposta:`, {
          hasData: !!response.data,
          hasChoices: !!(response.data && response.data.choices),
          choicesLength: response.data?.choices?.length || 0,
          firstChoice: response.data?.choices?.[0] ? 'exists' : 'missing'
        });
        
        // Valida√ß√£o robusta da resposta
        if (!response.data) {
          throw new Error('Resposta da API est√° vazia');
        }
        
        if (!response.data.choices || !Array.isArray(response.data.choices)) {
          console.error('‚ùå [PLANO-ACAO] Estrutura de resposta inv√°lida:', response.data);
          throw new Error('Estrutura de resposta da API √© inv√°lida - choices n√£o encontrado');
        }
        
        if (response.data.choices.length === 0) {
          throw new Error('API retornou array de choices vazio');
        }
        
        const firstChoice = response.data.choices[0];
        if (!firstChoice || !firstChoice.message || !firstChoice.message.content) {
          console.error('‚ùå [PLANO-ACAO] Primeira escolha inv√°lida:', firstChoice);
          throw new Error('Conte√∫do da mensagem n√£o encontrado na resposta da API');
        }
        
        const content = firstChoice.message.content;
        console.log(`‚úÖ [PLANO-ACAO] Plano gerado com sucesso: ${content.length} caracteres`);
        
        return content;
        
      } catch (attemptError) {
        lastError = attemptError;
        console.error(`‚ùå [PLANO-ACAO] Tentativa ${attempt} falhou:`, attemptError.message);
        
        // Se n√£o √© a √∫ltima tentativa, aguardar antes de tentar novamente
        if (attempt < maxRetries) {
          console.log(`‚è≥ [PLANO-ACAO] Aguardando 3 segundos antes da pr√≥xima tentativa...`);
          await new Promise(resolve => setTimeout(resolve, 3000));
        }
      }
    }
    
    // Se chegou aqui, todas as tentativas falharam
    throw lastError;
    
  } catch (error) {
    console.error('‚ùå [PLANO-ACAO] Erro na consulta ao Claude:', {
      message: error.message,
      code: error.code,
      status: error.response?.status,
      statusText: error.response?.statusText,
      responseData: error.response?.data
    });
    
    // Log mais detalhado para debug
    if (error.code === 'ECONNABORTED') {
      console.error('‚è∞ [PLANO-ACAO] Timeout na requisi√ß√£o - prompt muito grande ou modelo sobrecarregado');
      throw new Error('Timeout na gera√ß√£o do plano de a√ß√£o. Tente novamente com menos documentos.');
    }
    
    if (error.response?.status === 401) {
      throw new Error('Chave de API do OpenRouter inv√°lida ou expirada');
    }
    
    if (error.response?.status === 429) {
      throw new Error('Limite de requisi√ß√µes excedido. Tente novamente em alguns minutos.');
    }
    
    if (error.response?.status >= 500) {
      throw new Error('Erro interno do servidor OpenRouter. Tente novamente em alguns minutos.');
    }
    
    throw new Error(`Falha na gera√ß√£o do plano de a√ß√£o com IA: ${error.message}`);
  }
}

/**
 * Constr√≥i o prompt estruturado para o Claude 3.7
 * @param {string} contexto - Contexto dos documentos
 * @param {string} titulo - T√≠tulo do plano
 * @returns {string} - Prompt formatado
 */
function buildActionPlanPrompt(contexto, titulo) {
  return `
Atue como um consultor empresarial estrat√©gico especializado em an√°lise de reuni√µes e cria√ß√£o de planos de a√ß√£o.

Com base nos documentos fornecidos (transcri√ß√µes de reuni√µes, an√°lises de mercado, relat√≥rios empresariais), crie um plano de a√ß√£o completo e estruturado seguindo esta metodologia:

**DOCUMENTOS FORNECIDOS:**
${contexto}

**T√çTULO DO PLANO:** ${titulo}

**ESTRUTURA OBRIGAT√ìRIA:**

# üìã ${titulo.toUpperCase()}

## 1. üìä RESUMO EXECUTIVO DA REUNI√ÉO
- Participantes identificados
- Contexto e objetivos
- Principais decis√µes tomadas

## 2. üéØ DIAGN√ìSTICO SITUACIONAL
### An√°lise SWOT
- **üí™ For√ßas:** Vantagens competitivas e diferenciais identificados
- **‚ö†Ô∏è Fraquezas:** √Åreas que precisam de melhorias
- **üöÄ Oportunidades:** Tend√™ncias favor√°veis do mercado
- **‚ö° Amea√ßas:** Desafios e riscos do setor

### Principais Desafios Identificados
- Lista dos principais obst√°culos
- Recursos dispon√≠veis

## 3. üìà PLANO DE A√á√ÉO DETALHADO

### üîÑ Fase 1: Funda√ß√£o (0-3 meses)
- [ ] A√ß√£o espec√≠fica 1
- [ ] A√ß√£o espec√≠fica 2
- [ ] A√ß√£o espec√≠fica 3
**Respons√°vel:** [Quando identificado]
**Prazo:** [Data espec√≠fica]

### üöÄ Fase 2: Implementa√ß√£o (3-6 meses)
- [ ] A√ß√£o espec√≠fica 1
- [ ] A√ß√£o espec√≠fica 2
- [ ] A√ß√£o espec√≠fica 3
**Respons√°vel:** [Quando identificado]
**Prazo:** [Data espec√≠fica]

### üìä Fase 3: Otimiza√ß√£o (6-12 meses)
- [ ] A√ß√£o espec√≠fica 1
- [ ] A√ß√£o espec√≠fica 2
- [ ] A√ß√£o espec√≠fica 3
**Respons√°vel:** [Quando identificado]
**Prazo:** [Data espec√≠fica]

### üéØ Fase 4: Expans√£o (12+ meses)
- [ ] A√ß√£o espec√≠fica 1
- [ ] A√ß√£o espec√≠fica 2
- [ ] A√ß√£o espec√≠fica 3
**Respons√°vel:** [Quando identificado]
**Prazo:** [Data espec√≠fica]

## 4. üìä M√âTRICAS E KPIs

| M√©trica | Meta | Prazo | Respons√°vel |
|---------|------|-------|-------------|
| KPI 1 | Valor quantific√°vel | Data | Pessoa |
| KPI 2 | Valor quantific√°vel | Data | Pessoa |
| KPI 3 | Valor quantific√°vel | Data | Pessoa |

### Indicadores de Sucesso
- M√©trica 1: Descri√ß√£o e meta
- M√©trica 2: Descri√ß√£o e meta
- M√©trica 3: Descri√ß√£o e meta

## 5. üí∞ INVESTIMENTOS E ROI

### Custos Estimados por Categoria
| Categoria | Investimento | Per√≠odo |
|-----------|--------------|---------|
| Marketing | R$ X.XXX | Mensal |
| Tecnologia | R$ X.XXX | √önico |
| Pessoal | R$ X.XXX | Mensal |
| **Total** | **R$ X.XXX** | - |

### Proje√ß√£o de Retorno
- **ROI Esperado:** X% em Y meses
- **Payback:** X meses
- **An√°lise de Viabilidade:** Descri√ß√£o

## 6. ‚ö†Ô∏è RISCOS E MITIGA√á√ïES

### Principais Riscos Identificados
1. **Risco 1:** Descri√ß√£o
   - **Probabilidade:** Alta/M√©dia/Baixa
   - **Impacto:** Alto/M√©dio/Baixo
   - **Mitiga√ß√£o:** Estrat√©gia espec√≠fica

2. **Risco 2:** Descri√ß√£o
   - **Probabilidade:** Alta/M√©dia/Baixa
   - **Impacto:** Alto/M√©dio/Baixo
   - **Mitiga√ß√£o:** Estrat√©gia espec√≠fica

### Planos de Conting√™ncia
- Cen√°rio A: Descri√ß√£o e a√ß√µes
- Cen√°rio B: Descri√ß√£o e a√ß√µes

## 7. ‚ö° PR√ìXIMOS PASSOS IMEDIATOS

### üìÖ Esta Semana
- [ ] A√ß√£o urgente 1
- [ ] A√ß√£o urgente 2
- [ ] A√ß√£o urgente 3

### üìÖ Pr√≥ximas 2 Semanas
- [ ] A√ß√£o importante 1
- [ ] A√ß√£o importante 2
- [ ] A√ß√£o importante 3

### üéØ Marcos Importantes
- **Marco 1:** Data e descri√ß√£o
- **Marco 2:** Data e descri√ß√£o
- **Marco 3:** Data e descri√ß√£o

---

**DIRETRIZES DE FORMATA√á√ÉO:**
- Use markdown com emojis para organiza√ß√£o visual
- Crie listas com checkboxes para a√ß√µes pr√°ticas
- Inclua tabelas quando apropriado para dados financeiros
- Destaque informa√ß√µes cr√≠ticas em **negrito**
- Use blocos de cita√ß√£o para insights importantes

**CRIT√âRIOS DE QUALIDADE:**
- A√ß√µes espec√≠ficas e mensur√°veis
- Prazos realistas e detalhados
- Considera√ß√µes de or√ßamento e recursos
- Abordagem estrat√©gica e t√°tica equilibrada
- Linguagem clara e orientada √† execu√ß√£o

Analise os documentos fornecidos e produza um plano de a√ß√£o abrangente seguindo exatamente esta estrutura.
`;
}

module.exports = {
  generateActionPlan
};
