const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const Transcricao = require('../models/Transcricao');
const Cliente = require('../models/Cliente');
const Usuario = require('../models/Usuario');
const transcricaoService = require('../services/transcricaoService');
const replicateTranscricaoService = require('../services/replicateTranscricaoService');
const progressService = require('../services/progressService');
const { v4: uuidv4 } = require('uuid');
const mongoose = require('mongoose');

// Cache para o usu√°rio sistema
let usuarioSistemaId = null;

/**
 * Fun√ß√£o para obter ou criar usu√°rio sistema
 * @returns {String} ID do usu√°rio sistema
 */
async function getUsuarioSistema() {
  if (usuarioSistemaId) {
    return usuarioSistemaId;
  }
  
  try {
    // Tentar encontrar usu√°rio sistema existente
    let usuarioSistema = await Usuario.findOne({ 
      email: 'sistema@janice.app' 
    });
    
    if (!usuarioSistema) {
      console.log('üîß [SISTEMA] Criando usu√°rio sistema...');
      
      // Criar usu√°rio sistema
      usuarioSistema = new Usuario({
        googleId: 'sistema-janice-' + Date.now(),
        email: 'sistema@janice.app',
        nome: 'Sistema Janice',
        role: 'admin',
        ativo: true,
        foto: null
      });
      
      await usuarioSistema.save();
      console.log('‚úÖ [SISTEMA] Usu√°rio sistema criado com sucesso');
    }
    
    usuarioSistemaId = usuarioSistema._id;
    return usuarioSistemaId;
    
  } catch (error) {
    console.error('‚ùå [SISTEMA] Erro ao obter usu√°rio sistema:', error);
    throw new Error('Erro ao configurar usu√°rio sistema');
  }
}
// Fun√ß√£o auxiliar para validar ObjectId
const validarObjectId = (req, res, next) => {
  if (!mongoose.isValidObjectId(req.params.clienteId) && 
      !mongoose.isValidObjectId(req.params.id)) {
    return res.status(400).json({ erro: 'ID inv√°lido' });
  }
  next();
};

// Configura√ß√£o do Multer para upload de arquivos
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const tempDir = path.join(__dirname, '..', '..', 'temp');
    
    // Criar diret√≥rio tempor√°rio se n√£o existir
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    cb(null, tempDir);
  },
  filename: function (req, file, cb) {
    // Usar timestamp + nome original para evitar conflitos
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + '-' + file.originalname);
  }
});

// Filtro para tipos de arquivo permitidos
const fileFilter = (req, file, cb) => {
  // Aceitar qualquer tipo de √°udio ou v√≠deo
  if (file.mimetype.startsWith('audio/') || file.mimetype.startsWith('video/')) {
    cb(null, true);
  } else {
    cb(new Error('Tipo de arquivo n√£o suportado. Envie apenas arquivos de √°udio ou v√≠deo.'), false);
  }
};

// Configura√ß√£o do Multer com limite de tamanho (500MB)
const upload = multer({
  storage: storage,
  fileFilter: fileFilter,
  limits: {
    fileSize: 500 * 1024 * 1024 // 500MB
  }
});

/**
 * @route   GET /api/transcricoes/cliente/:clienteId
 * @desc    Obter todas as transcri√ß√µes de um cliente
 * @access  Public
 */
router.get('/cliente/:clienteId', async (req, res) => {
  try {
    const { clienteId } = req.params;
    
  if (!mongoose.isValidObjectId(clienteId)) {
      return res.status(400).json({ erro: 'ID de cliente inv√°lido' });
    }
    
    // Verificar se o cliente existe
    const cliente = await Cliente.findById(clienteId);
    if (!cliente) {
      return res.status(404).json({ erro: 'Cliente n√£o encontrado' });
    }
    
    // Buscar transcri√ß√µes do cliente ordenadas por data (mais recentes primeiro)
    const transcricoes = await Transcricao.find({ cliente: clienteId })
      .sort({ createdAt: -1 })
      .select('-conteudo'); // N√£o enviar o conte√∫do completo na listagem
    
    res.json(transcricoes);
  } catch (error) {
    console.error('Erro ao buscar transcri√ß√µes:', error);
    res.status(500).json({ erro: 'Erro ao buscar transcri√ß√µes' });
  }
});

/**
 * @route   GET /api/transcricoes/:id
 * @desc    Obter detalhes de uma transcri√ß√£o espec√≠fica
 * @access  Public
 */
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
  if (!mongoose.isValidObjectId(id)) {
      return res.status(400).json({ erro: 'ID de transcri√ß√£o inv√°lido' });
    }
    
    const transcricao = await Transcricao.findById(id).populate('cliente', 'nome cnpj');
    
    if (!transcricao) {
      return res.status(404).json({ erro: 'Transcri√ß√£o n√£o encontrada' });
    }
    
    res.json(transcricao);
  } catch (error) {
    console.error('Erro ao buscar detalhes da transcri√ß√£o:', error);
    res.status(500).json({ erro: 'Erro ao buscar detalhes da transcri√ß√£o' });
  }
});

/**
 * @route   POST /api/transcricoes/upload/:clienteId
 * @desc    Fazer upload e processar um arquivo para transcri√ß√£o
 * @access  Public
 */
router.post('/upload/:clienteId', upload.single('arquivo'), async (req, res) => {
  let filePath = null;
  
  try {
    const { clienteId } = req.params;
    const { titulo, idioma = 'pt' } = req.body;
    
    console.log(`üöÄ [TRANSCRICAO-UPLOAD] Iniciando upload para cliente: ${clienteId}`);
    console.log(`üìù [TRANSCRICAO-UPLOAD] T√≠tulo: "${titulo}"`);
    console.log(`üåç [TRANSCRICAO-UPLOAD] Idioma: ${idioma}`);
    
    // Valida√ß√£o detalhada do arquivo
    if (!req.file) {
      console.error('‚ùå [TRANSCRICAO-UPLOAD] Nenhum arquivo foi enviado');
      return res.status(400).json({ 
        erro: 'Nenhum arquivo foi enviado. Por favor, selecione um arquivo de √°udio ou v√≠deo.' 
      });
    }
    
    console.log(`üìÅ [TRANSCRICAO-UPLOAD] Arquivo recebido: ${req.file.originalname}`);
    console.log(`üìä [TRANSCRICAO-UPLOAD] Tamanho: ${(req.file.size / (1024 * 1024)).toFixed(2)} MB`);
    console.log(`üé≠ [TRANSCRICAO-UPLOAD] Tipo MIME: ${req.file.mimetype}`);
    
    filePath = req.file.path;
    
    // Valida√ß√£o do tamanho do arquivo
    const maxSize = 500 * 1024 * 1024; // 500MB
    if (req.file.size > maxSize) {
      console.error(`‚ùå [TRANSCRICAO-UPLOAD] Arquivo muito grande: ${(req.file.size / (1024 * 1024)).toFixed(2)} MB`);
      return res.status(400).json({ 
        erro: `Arquivo muito grande (${(req.file.size / (1024 * 1024)).toFixed(2)} MB). Tamanho m√°ximo permitido: 500 MB.` 
      });
    }
    
    // Valida√ß√£o do tipo de arquivo
    if (!req.file.mimetype.startsWith('audio/') && !req.file.mimetype.startsWith('video/')) {
      console.error(`‚ùå [TRANSCRICAO-UPLOAD] Tipo de arquivo n√£o suportado: ${req.file.mimetype}`);
      return res.status(400).json({ 
        erro: `Tipo de arquivo n√£o suportado (${req.file.mimetype}). Envie apenas arquivos de √°udio ou v√≠deo.` 
      });
    }
    
    // Valida√ß√£o do ID do cliente
    if (!mongoose.isValidObjectId(clienteId)) {
      console.error(`‚ùå [TRANSCRICAO-UPLOAD] ID de cliente inv√°lido: ${clienteId}`);
      return res.status(400).json({ erro: 'ID de cliente inv√°lido' });
    }
    
    // Verificar se o cliente existe
    console.log(`üîç [TRANSCRICAO-UPLOAD] Verificando se cliente existe: ${clienteId}`);
    const cliente = await Cliente.findById(clienteId);
    if (!cliente) {
      console.error(`‚ùå [TRANSCRICAO-UPLOAD] Cliente n√£o encontrado: ${clienteId}`);
      return res.status(404).json({ erro: 'Cliente n√£o encontrado' });
    }
    
    console.log(`‚úÖ [TRANSCRICAO-UPLOAD] Cliente encontrado: ${cliente.nome}`);
    
    // Valida√ß√£o do t√≠tulo
    if (!titulo || titulo.trim().length === 0) {
      console.error('‚ùå [TRANSCRICAO-UPLOAD] T√≠tulo da transcri√ß√£o n√£o fornecido');
      return res.status(400).json({ erro: 'O t√≠tulo da transcri√ß√£o √© obrigat√≥rio' });
    }
    
    if (titulo.trim().length > 200) {
      console.error(`‚ùå [TRANSCRICAO-UPLOAD] T√≠tulo muito longo: ${titulo.length} caracteres`);
      return res.status(400).json({ erro: 'O t√≠tulo deve ter no m√°ximo 200 caracteres' });
    }
    
    console.log(`üíæ [TRANSCRICAO-UPLOAD] Criando registro de transcri√ß√£o no banco...`);
    
    // Obter usu√°rio sistema para o campo criadoPor
    const usuarioSistemaId = await getUsuarioSistema();
    console.log(`üë§ [TRANSCRICAO-UPLOAD] Usando usu√°rio sistema: ${usuarioSistemaId}`);
    
    // Criar registro inicial de transcri√ß√£o
    const transcricao = new Transcricao({
      cliente: clienteId,
      criadoPor: usuarioSistemaId,
      titulo: titulo.trim(),
      conteudo: 'Processando...',
      nomeArquivoOriginal: req.file.originalname,
      idioma,
      emProgresso: true
    });
    
    await transcricao.save();
    
    console.log(`‚úÖ [TRANSCRICAO-UPLOAD] Transcri√ß√£o criada com ID: ${transcricao._id}`);
    console.log(`üöÄ [TRANSCRICAO-UPLOAD] Iniciando processamento ass√≠ncrono...`);
    
    // Iniciar processamento ass√≠ncrono
    processTranscricaoAsync(filePath, transcricao._id, clienteId, idioma);
    
    // Retornar ID da transcri√ß√£o para que o cliente possa acompanhar o progresso
    res.status(202).json({
      mensagem: 'Arquivo recebido, transcri√ß√£o iniciada',
      transcricaoId: transcricao._id,
      detalhes: {
        arquivo: req.file.originalname,
        tamanho: `${(req.file.size / (1024 * 1024)).toFixed(2)} MB`,
        tipo: req.file.mimetype,
        titulo: titulo.trim(),
        idioma
      }
    });
    
    console.log(`üéâ [TRANSCRICAO-UPLOAD] Upload conclu√≠do com sucesso para transcri√ß√£o ${transcricao._id}`);
    
  } catch (error) {
    console.error('üí• [TRANSCRICAO-UPLOAD] Erro cr√≠tico no upload:', error);
    console.error('üìç [TRANSCRICAO-UPLOAD] Stack trace:', error.stack);
    
    // Limpar arquivo se ocorrer um erro
    if (filePath && fs.existsSync(filePath)) {
      try {
        fs.unlinkSync(filePath);
        console.log(`üóëÔ∏è [TRANSCRICAO-UPLOAD] Arquivo tempor√°rio removido: ${filePath}`);
      } catch (err) {
        console.error('‚ùå [TRANSCRICAO-UPLOAD] Erro ao remover arquivo tempor√°rio:', err);
      }
    }
    
    // Retornar erro espec√≠fico baseado no tipo
    let errorMessage = 'Erro interno do servidor ao processar arquivo para transcri√ß√£o';
    let statusCode = 500;
    
    if (error.name === 'ValidationError') {
      errorMessage = 'Dados inv√°lidos: ' + Object.values(error.errors).map(e => e.message).join(', ');
      statusCode = 400;
    } else if (error.name === 'MongoError' || error.name === 'MongoServerError') {
      errorMessage = 'Erro de banco de dados. Tente novamente em alguns instantes.';
      statusCode = 503;
    } else if (error.message.includes('ENOSPC')) {
      errorMessage = 'Espa√ßo insuficiente no servidor. Tente novamente mais tarde.';
      statusCode = 507;
    } else if (error.message.includes('EMFILE') || error.message.includes('ENFILE')) {
      errorMessage = 'Servidor temporariamente sobrecarregado. Tente novamente em alguns minutos.';
      statusCode = 503;
    }
    
    res.status(statusCode).json({ 
      erro: errorMessage,
      detalhes: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * Processa a transcri√ß√£o de forma ass√≠ncrona
 * @param {String} filePath - Caminho do arquivo
 * @param {String} transcricaoId - ID da transcri√ß√£o
 * @param {String} clienteId - ID do cliente
 * @param {String} idioma - C√≥digo do idioma
 */
async function processTranscricaoAsync(filePath, transcricaoId, clienteId, idioma) {
  try {
    console.log(`=== INICIANDO TRANSCRI√á√ÉO ${transcricaoId} ===`);
    console.log(`Arquivo: ${filePath}`);
    console.log(`Cliente: ${clienteId}`);
    console.log(`Idioma: ${idioma}`);
    
    // Verificar se REPLICATE_API_TOKEN est√° configurado
    if (!process.env.REPLICATE_API_TOKEN) {
      console.warn('REPLICATE_API_TOKEN n√£o configurado, usando smart-whisper como fallback');
      
      // Encontrar o processo correto no Map global
      const allProcesses = progressService.getAllGlobalProcesses();
      const matchingProcess = allProcesses.find(p => 
        p.tipo === 'transcricao' && 
        p.cliente && p.cliente._id === clienteId &&
        p.status === 'em-progresso'
      );
      
      if (matchingProcess) {
        // Atualizar processo para smart-whisper
        progressService.updateGlobalProcess(matchingProcess.id, {
          progresso: 10,
          mensagem: 'Usando smart-whisper como fallback'
        });
      }
      
      // Fallback para smart-whisper
      const resultado = await transcricaoService.transcribeFile(filePath, clienteId, {
        language: idioma,
        model: 'medium'
      });
      
      await Transcricao.findByIdAndUpdate(transcricaoId, {
        conteudo: resultado.text,
        duracao: resultado.duration,
        emProgresso: false,
        provider: 'smart-whisper'
      });
      
      if (matchingProcess) {
        // Marcar processo como conclu√≠do
        progressService.completeGlobalProcess(matchingProcess.id, {
          progresso: 100,
          resultado: 'Transcri√ß√£o conclu√≠da com smart-whisper',
          resourceId: transcricaoId
        });
      }
      
      console.log(`Transcri√ß√£o ${transcricaoId} conclu√≠da com smart-whisper (fallback)`);
      return;
    }
    
    // Usar Replicate como m√©todo principal
    console.log('Usando Replicate para transcri√ß√£o...');
    
    // Encontrar o processo correto no Map global
    const allProcesses = progressService.getAllGlobalProcesses();
    const matchingProcess = allProcesses.find(p => 
      p.tipo === 'transcricao' && 
      p.cliente && p.cliente._id === clienteId &&
      p.status === 'em-progresso'
    );
    
    if (matchingProcess) {
      // Atualizar progresso para Replicate
      progressService.updateGlobalProcess(matchingProcess.id, {
        progresso: 15,
        mensagem: 'Usando Replicate para transcri√ß√£o'
      });
    }
    
    const resultado = await replicateTranscricaoService.transcribeFile(filePath, clienteId, {
      language: idioma === 'pt' ? 'portuguese' : idioma,
      modelSize: 'medium',
      wordTimestamps: true,
      temperature: 0
    });
    
    // Atualizar registro com o resultado
    await Transcricao.findByIdAndUpdate(transcricaoId, {
      conteudo: resultado.text,
      duracao: resultado.duration,
      emProgresso: false,
      provider: resultado.provider,
      modelUsed: resultado.modelUsed,
      processingTime: resultado.processingTime
    });
    
    if (matchingProcess) {
      // Marcar processo como conclu√≠do
      progressService.completeGlobalProcess(matchingProcess.id, {
        progresso: 100,
        resultado: 'Transcri√ß√£o conclu√≠da com Replicate',
        resourceId: transcricaoId
      });
    }
    
    console.log(`Transcri√ß√£o ${transcricaoId} conclu√≠da com sucesso via Replicate`);
    console.log(`Tempo de processamento: ${resultado.processingTime}s`);
    console.log(`Modelo usado: ${resultado.modelUsed}`);
    
  } catch (error) {
    console.error(`Erro ao processar transcri√ß√£o ${transcricaoId}:`, error);
    
    // Se Replicate falhar, tentar smart-whisper como fallback
    if (error.message.includes('Replicate') && process.env.REPLICATE_API_TOKEN) {
      console.log('Tentando fallback para smart-whisper...');
      
      try {
        const resultado = await transcricaoService.transcribeFile(filePath, clienteId, {
          language: idioma,
          model: 'medium'
        });
        
        await Transcricao.findByIdAndUpdate(transcricaoId, {
          conteudo: resultado.text,
          duracao: resultado.duration,
          emProgresso: false,
          provider: 'smart-whisper-fallback',
          mensagemErro: `Replicate falhou, usado smart-whisper: ${error.message}`
        });
        
        console.log(`Transcri√ß√£o ${transcricaoId} conclu√≠da com smart-whisper (fallback ap√≥s erro Replicate)`);
        return;
        
      } catch (fallbackError) {
        console.error(`Fallback tamb√©m falhou para transcri√ß√£o ${transcricaoId}:`, fallbackError);
        
        await Transcricao.findByIdAndUpdate(transcricaoId, {
          emProgresso: false,
          erro: true,
          mensagemErro: `Replicate e smart-whisper falharam. Replicate: ${error.message}. Smart-whisper: ${fallbackError.message}`
        });
        return;
      }
    }
    
    // Atualizar registro com o erro
    await Transcricao.findByIdAndUpdate(transcricaoId, {
      emProgresso: false,
      erro: true,
      mensagemErro: error.message
    });
  } finally {
    // Remover arquivo tempor√°rio
    try {
      if (process.env.REPLICATE_API_TOKEN) {
        replicateTranscricaoService.removeFile(filePath);
      } else {
        transcricaoService.removeFile(filePath);
      }
    } catch (removeError) {
      console.error(`Erro ao remover arquivo ${filePath}:`, removeError);
    }
  }
}

/**
 * @route   DELETE /api/transcricoes/:id
 * @desc    Excluir uma transcri√ß√£o
 * @access  Public
 */
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    if (!mongoose.isValidObjectId(id)) {
      return res.status(400).json({ erro: 'ID de transcri√ß√£o inv√°lido' });
    }
    
    const transcricao = await Transcricao.findById(id);
    
    if (!transcricao) {
      return res.status(404).json({ erro: 'Transcri√ß√£o n√£o encontrada' });
    }
    
    await Transcricao.findByIdAndDelete(id);
    
    res.json({ mensagem: 'Transcri√ß√£o exclu√≠da com sucesso' });
  } catch (error) {
    console.error('Erro ao excluir transcri√ß√£o:', error);
    res.status(500).json({ erro: 'Erro ao excluir transcri√ß√£o' });
  }
});

/**
 * @route   GET /api/transcricoes/status/:id
 * @desc    Verificar o status de uma transcri√ß√£o (para polling)
 * @access  Public
 */
router.get('/status/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    if (!mongoose.isValidObjectId(id)) {
      return res.status(400).json({ erro: 'ID de transcri√ß√£o inv√°lido' });
    }
    
    // Buscar apenas os campos necess√°rios para verifica√ß√£o de status
    const transcricao = await Transcricao.findById(id)
      .select('emProgresso erro mensagemErro duracao dataCriacao');
    
    if (!transcricao) {
      return res.status(404).json({ erro: 'Transcri√ß√£o n√£o encontrada' });
    }
    
    res.json({
      id: transcricao._id,
      emProgresso: transcricao.emProgresso,
      erro: transcricao.erro,
      mensagemErro: transcricao.mensagemErro,
      duracao: transcricao.duracao,
      dataCriacao: transcricao.dataCriacao,
      // Adicionar uma estimativa de tempo restante baseada na dura√ß√£o e no tempo decorrido
      estimativaTempoRestante: transcricao.emProgresso ? calcularTempoRestante(transcricao) : 0
    });
  } catch (error) {
    console.error('Erro ao verificar status da transcri√ß√£o:', error);
    res.status(500).json({ erro: 'Erro ao verificar status da transcri√ß√£o' });
  }
});

/**
 * Calcula uma estimativa de tempo restante para conclus√£o da transcri√ß√£o
 * @param {Object} transcricao - Objeto da transcri√ß√£o
 * @returns {Number} - Tempo estimado restante em segundos
 */
function calcularTempoRestante(transcricao) {
  if (!transcricao.emProgresso) return 0;
  
  const agora = new Date();
  const iniciado = new Date(transcricao.dataCriacao);
  const tempoDecorrido = (agora - iniciado) / 1000; // em segundos
  
  // Estimar dura√ß√£o baseada no tamanho (se dispon√≠vel) ou usar um valor padr√£o
  let duracaoEstimada = transcricao.duracao || 0;
  
  // Ajustar para estimativa m√≠nima de 5 minutos
  if (duracaoEstimada < 300) duracaoEstimada = 300;
  
  // Adicionar buffer de 5 minutos
  duracaoEstimada += 300;
  
  // Calcular tempo restante
  const tempoRestante = Math.max(0, duracaoEstimada - tempoDecorrido);
  
  return Math.round(tempoRestante);
}

module.exports = router;
