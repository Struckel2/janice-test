const express = require('express');
const router = express.Router();
const { requireAuth } = require('../middleware/auth');
const progressService = require('../services/progressService');

/**
 * GET /api/processos/ativos
 * Retorna todos os processos ativos globalmente (vis√≠veis para todos os usu√°rios)
 */
router.get('/ativos', requireAuth, async (req, res) => {
  try {
    const userId = req.user._id.toString();
    const allGlobalProcesses = progressService.getAllGlobalProcesses();
    
    console.log(`üîç [DEBUG-ATIVOS-GLOBAL] ===== GET /api/processos/ativos =====`);
    console.log(`üîç [DEBUG-ATIVOS-GLOBAL] User ID: ${userId}`);
    console.log(`üîç [DEBUG-ATIVOS-GLOBAL] Processos globais encontrados: ${allGlobalProcesses.length}`);
    console.log(`üîç [DEBUG-ATIVOS-GLOBAL] Processos:`, allGlobalProcesses.map(p => ({
      id: p.id,
      tipo: p.tipo,
      status: p.status,
      progresso: p.progresso,
      initiatedBy: p.initiatedBy,
      userName: p.userName
    })));
    
    // Retornar TODOS os processos globais (vis√≠veis para todos os usu√°rios)
    res.json(allGlobalProcesses);
    
  } catch (error) {
    console.error('‚ùå [DEBUG-ATIVOS-GLOBAL] Erro ao buscar processos ativos globais:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
});

/**
 * DELETE /api/processos/:processId
 * Remove um processo ativo global (quando usu√°rio clica para ver resultado)
 */
router.delete('/:processId', requireAuth, async (req, res) => {
  try {
    const userId = req.user._id.toString();
    const { processId } = req.params;
    
    console.log(`üóëÔ∏è [DELETE-PROCESSO-GLOBAL] User: ${userId}, ProcessId: ${processId}`);
    
    // Usar a nova fun√ß√£o global para remover processo
    progressService.removeActiveProcess(processId);
    
    res.json({
      success: true,
      message: 'Processo removido com sucesso'
    });
  } catch (error) {
    console.error('‚ùå [DELETE-PROCESSO-GLOBAL] Erro ao remover processo:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
});

/**
 * POST /api/processos/ativos
 * Registra um novo processo ativo globalmente
 */
router.post('/ativos', requireAuth, async (req, res) => {
  try {
    const userId = req.user._id.toString();
    const processData = req.body;
    
    console.log(`üìù [PROCESSOS-POST-GLOBAL] ===== REGISTRANDO NOVO PROCESSO GLOBAL =====`);
    console.log(`üìù [PROCESSOS-POST-GLOBAL] User ID: ${userId}`);
    console.log(`üìù [PROCESSOS-POST-GLOBAL] User Name: ${req.user.nome}`);
    console.log(`üìù [PROCESSOS-POST-GLOBAL] Process ID: ${processData.id}`);
    console.log(`üìù [PROCESSOS-POST-GLOBAL] Tipo: ${processData.tipo}`);
    console.log(`üìù [PROCESSOS-POST-GLOBAL] T√≠tulo: ${processData.titulo}`);
    
    // Validar dados obrigat√≥rios
    if (!processData.id || !processData.tipo || !processData.titulo) {
      console.error(`‚ùå [PROCESSOS-POST-GLOBAL] Dados obrigat√≥rios faltando:`, {
        id: !!processData.id,
        tipo: !!processData.tipo,
        titulo: !!processData.titulo
      });
      return res.status(400).json({
        success: false,
        error: 'Dados obrigat√≥rios faltando: id, tipo e titulo s√£o necess√°rios'
      });
    }
    
    // Preparar informa√ß√µes do usu√°rio
    const userInfo = {
      nome: req.user.nome || 'Usu√°rio',
      email: req.user.email || ''
    };
    
    // Registrar processo no progressService com informa√ß√µes do usu√°rio
    console.log(`üìù [PROCESSOS-POST-GLOBAL] Chamando progressService.registerActiveProcess...`);
    progressService.registerActiveProcess(userId, processData, userInfo);
    console.log(`üìù [PROCESSOS-POST-GLOBAL] Processo registrado com sucesso no progressService`);
    
    res.json({
      success: true,
      message: 'Processo registrado com sucesso',
      processId: processData.id
    });
    
  } catch (error) {
    console.error('‚ùå [PROCESSOS-POST-GLOBAL] Erro ao registrar processo:', error);
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor',
      message: error.message
    });
  }
});

/**
 * GET /api/processos/sse
 * Endpoint para Server-Sent Events do painel de processos
 */
router.get('/sse', requireAuth, (req, res) => {
  const userId = req.user._id.toString();
  
  console.log(`üîå [SSE-PROCESSOS] ===== NOVA CONEX√ÉO SSE INICIADA =====`);
  console.log(`üîå [SSE-PROCESSOS] Usu√°rio: ${userId}`);
  console.log(`üîå [SSE-PROCESSOS] IP: ${req.ip}`);
  console.log(`üîå [SSE-PROCESSOS] User-Agent: ${req.get('User-Agent')}`);
  console.log(`üîå [SSE-PROCESSOS] Headers Accept: ${req.get('Accept')}`);
  
  // Registrar conex√£o SSE espec√≠fica para processos
  console.log(`üîå [SSE-PROCESSOS] Chamando progressService.registerConnection...`);
  const keepAlive = progressService.registerConnection(userId, res, 'processes');
  console.log(`üîå [SSE-PROCESSOS] registerConnection retornou:`, keepAlive ? 'keepAlive function' : 'undefined');
  
  // Verificar se a conex√£o foi realmente registrada
  const connectionKey = `${userId}_processes`;
  console.log(`üîå [SSE-PROCESSOS] Verificando se conex√£o ${connectionKey} foi registrada...`);
  
  // Cleanup quando conex√£o for fechada
  req.on('close', () => {
    console.log(`üîå [SSE-PROCESSOS] ===== CONEX√ÉO SSE FECHADA =====`);
    console.log(`üîå [SSE-PROCESSOS] Usu√°rio: ${userId}`);
    console.log(`üîå [SSE-PROCESSOS] Removendo conex√£o ${connectionKey}...`);
    progressService.removeConnection(connectionKey, keepAlive);
  });
  
  req.on('error', (error) => {
    console.error(`‚ùå [SSE-PROCESSOS] ===== ERRO NA CONEX√ÉO SSE =====`);
    console.error(`‚ùå [SSE-PROCESSOS] Usu√°rio: ${userId}`);
    console.error(`‚ùå [SSE-PROCESSOS] Erro:`, error);
    progressService.removeConnection(connectionKey, keepAlive);
  });
});

module.exports = router;
