/**
 * Polyfill robusto para garantir que fetch funcione corretamente no Node.js
 * Suporta Node.js 18+ (fetch nativo) e vers√µes anteriores (node-fetch)
 */

console.log('üîß [FETCH-POLYFILL] ===== INICIANDO CONFIGURA√á√ÉO DO FETCH =====');
console.log('üîß [FETCH-POLYFILL] Node.js version:', process.version);
console.log('üîß [FETCH-POLYFILL] globalThis.fetch dispon√≠vel?', typeof globalThis.fetch !== 'undefined');
console.log('üîß [FETCH-POLYFILL] global.fetch dispon√≠vel?', typeof global.fetch !== 'undefined');

// Verificar se fetch j√° est√° dispon√≠vel globalmente
if (typeof globalThis.fetch === 'undefined') {
  console.log('‚ö†Ô∏è [FETCH-POLYFILL] Fetch n√£o encontrado globalmente, tentando configurar...');
  
  try {
    // Tentar usar fetch nativo do Node.js 18+
    console.log('üîß [FETCH-POLYFILL] Tentando usar fetch nativo do Node.js...');
    
    // No Node.js 18+, fetch pode estar dispon√≠vel mas n√£o globalmente
    if (typeof fetch !== 'undefined') {
      console.log('‚úÖ [FETCH-POLYFILL] Fetch nativo encontrado, configurando globalmente...');
      globalThis.fetch = fetch;
      global.fetch = fetch;
      console.log('‚úÖ [FETCH-POLYFILL] Fetch nativo configurado com sucesso');
    } else {
      console.log('‚ö†Ô∏è [FETCH-POLYFILL] Fetch nativo n√£o dispon√≠vel, tentando node-fetch...');
      
      // Tentar importar node-fetch como fallback
      try {
        const nodeFetch = require('node-fetch');
        console.log('‚úÖ [FETCH-POLYFILL] node-fetch encontrado, configurando...');
        globalThis.fetch = nodeFetch.default || nodeFetch;
        global.fetch = nodeFetch.default || nodeFetch;
        console.log('‚úÖ [FETCH-POLYFILL] node-fetch configurado com sucesso');
      } catch (nodeFetchError) {
        console.error('‚ùå [FETCH-POLYFILL] node-fetch n√£o dispon√≠vel:', nodeFetchError.message);
        
        // Criar um fetch mock b√°sico para evitar erros
        console.log('‚ö†Ô∏è [FETCH-POLYFILL] Criando fetch mock b√°sico...');
        const mockFetch = () => {
          throw new Error('Fetch n√£o dispon√≠vel neste ambiente Node.js. Instale node-fetch ou use Node.js 18+');
        };
        globalThis.fetch = mockFetch;
        global.fetch = mockFetch;
        console.log('‚ö†Ô∏è [FETCH-POLYFILL] Fetch mock criado (ir√° gerar erro ao ser usado)');
      }
    }
  } catch (error) {
    console.error('‚ùå [FETCH-POLYFILL] Erro ao configurar fetch:', error);
    
    // Criar fetch mock em caso de erro
    const mockFetch = () => {
      throw new Error('Erro na configura√ß√£o do fetch: ' + error.message);
    };
    globalThis.fetch = mockFetch;
    global.fetch = mockFetch;
  }
} else {
  console.log('‚úÖ [FETCH-POLYFILL] Fetch j√° dispon√≠vel globalmente');
  
  // Garantir que tamb√©m esteja dispon√≠vel em global
  if (typeof global.fetch === 'undefined') {
    global.fetch = globalThis.fetch;
    console.log('‚úÖ [FETCH-POLYFILL] Fetch copiado para global');
  }
}

// Verifica√ß√£o final
console.log('üîß [FETCH-POLYFILL] ===== VERIFICA√á√ÉO FINAL =====');
console.log('üîß [FETCH-POLYFILL] globalThis.fetch dispon√≠vel?', typeof globalThis.fetch !== 'undefined');
console.log('üîß [FETCH-POLYFILL] global.fetch dispon√≠vel?', typeof global.fetch !== 'undefined');
console.log('üîß [FETCH-POLYFILL] fetch (direto) dispon√≠vel?', typeof fetch !== 'undefined');
console.log('üîß [FETCH-POLYFILL] Tipo do fetch:', typeof globalThis.fetch);

// Teste b√°sico do fetch (sem fazer requisi√ß√£o real)
try {
  if (typeof globalThis.fetch === 'function') {
    console.log('‚úÖ [FETCH-POLYFILL] Fetch √© uma fun√ß√£o v√°lida');
  } else {
    console.log('‚ùå [FETCH-POLYFILL] Fetch n√£o √© uma fun√ß√£o:', typeof globalThis.fetch);
  }
} catch (testError) {
  console.error('‚ùå [FETCH-POLYFILL] Erro no teste do fetch:', testError.message);
}

console.log('üîß [FETCH-POLYFILL] ===== CONFIGURA√á√ÉO CONCLU√çDA =====');

module.exports = {};
