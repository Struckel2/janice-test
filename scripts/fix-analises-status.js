/**
 * Script para corrigir an√°lises que est√£o com status emProgresso: true incorretamente
 * 
 * Este script verifica todas as an√°lises no banco de dados e corrige aquelas
 * que est√£o marcadas como em progresso, mas que j√° deveriam estar conclu√≠das
 * (por exemplo, se j√° possuem um PDF gerado).
 */

// Carregar vari√°veis de ambiente
require('dotenv').config();

// Importar depend√™ncias
const mongoose = require('mongoose');
const Analise = require('../server/models/Analise');
const progressService = require('../server/services/progressService');

// Conectar ao MongoDB
mongoose.connect(process.env.MONGODB_URI)
  .then(() => {
    console.log('‚úÖ Conectado ao MongoDB');
    fixAnalises();
  })
  .catch(err => {
    console.error('‚ùå Erro ao conectar ao MongoDB:', err);
    process.exit(1);
  });

/**
 * Fun√ß√£o principal para corrigir an√°lises
 */
async function fixAnalises() {
  try {
    console.log('\n====== INICIANDO CORRE√á√ÉO DE AN√ÅLISES ======\n');
    
    // Buscar todas as an√°lises que est√£o marcadas como em progresso
    const analises = await Analise.find({ emProgresso: true })
      .populate('cliente', 'nome cnpj');
    
    console.log(`üîç Encontradas ${analises.length} an√°lises marcadas como em progresso`);
    
    if (analises.length === 0) {
      console.log('‚úÖ Nenhuma an√°lise para corrigir');
      await mongoose.disconnect();
      return;
    }
    
    // Contador de an√°lises corrigidas
    let corrigidas = 0;
    
    // Processar cada an√°lise
    for (const analise of analises) {
      console.log(`\n----- Processando an√°lise ${analise._id} -----`);
      console.log(`CNPJ: ${analise.cnpj}`);
      console.log(`Cliente: ${analise.cliente ? analise.cliente.nome : 'N/A'}`);
      console.log(`Data de cria√ß√£o: ${analise.dataCriacao}`);
      
      // Verificar se a an√°lise j√° tem conte√∫do e PDF (indicando que est√° conclu√≠da)
      const estaConcluida = analise.conteudo && 
                           analise.conteudo !== 'An√°lise em andamento...' &&
                           analise.pdfUrl;
      
      if (estaConcluida) {
        console.log('üîß Esta an√°lise parece estar conclu√≠da, mas est√° marcada como em progresso');
        
        // Atualizar a an√°lise para marcar como conclu√≠da
        analise.emProgresso = false;
        
        // Se n√£o tiver data de expira√ß√£o, definir para 30 dias a partir de hoje
        if (!analise.dataExpiracao) {
          const dataExpiracao = new Date();
          dataExpiracao.setDate(dataExpiracao.getDate() + 30);
          analise.dataExpiracao = dataExpiracao;
          console.log(`üìÖ Definida data de expira√ß√£o: ${dataExpiracao}`);
        }
        
        // Salvar as altera√ß√µes
        await analise.save();
        console.log('‚úÖ An√°lise atualizada com sucesso');
        
        // Criar um processo tempor√°rio e marc√°-lo como conclu√≠do para garantir
        // que o frontend seja notificado corretamente
        if (analise.cliente && analise.cliente._id) {
          const tempProcessId = `temp_fix_${analise._id}`;
          
          // Registrar processo tempor√°rio
          progressService.registerActiveProcess('sistema', {
            id: tempProcessId,
            tipo: 'analise',
            titulo: `An√°lise CNPJ: ${analise.cnpj}`,
            cliente: { _id: analise.cliente._id }
          }, { nome: 'Sistema', email: 'sistema@janice.app' });
          
          // Marcar imediatamente como conclu√≠do
          progressService.completeActiveProcess(tempProcessId, {
            progresso: 100,
            resultado: 'An√°lise CNPJ conclu√≠da com sucesso',
            resourceId: analise._id
          });
          
          // Enviar evento de conclus√£o via SSE
          progressService.sendCompletionEvent(analise.cliente._id, {
            percentage: 100,
            message: 'An√°lise conclu√≠da com sucesso!',
            step: 4,
            stepStatus: 'completed',
            pdfUrl: analise.pdfUrl
          });
          
          console.log('üì£ Eventos de conclus√£o enviados');
        }
        
        corrigidas++;
      } else {
        console.log('‚ö†Ô∏è Esta an√°lise parece estar realmente em progresso ou com erro');
        
        // Se o conte√∫do for "An√°lise em andamento..." mas a an√°lise √© antiga (mais de 30 minutos),
        // provavelmente houve algum erro no processo
        const agora = new Date();
        const tempoDecorrido = agora - analise.dataCriacao;
        const minutosDecorridos = tempoDecorrido / (1000 * 60);
        
        if (minutosDecorridos > 30) {
          console.log(`‚è∞ An√°lise em progresso h√° ${minutosDecorridos.toFixed(1)} minutos`);
          console.log('üîß Marcando como erro por timeout');
          
          analise.emProgresso = false;
          analise.erro = true;
          analise.mensagemErro = 'Timeout: A an√°lise demorou mais que o esperado';
          
          await analise.save();
          console.log('‚úÖ An√°lise marcada como erro');
          
          corrigidas++;
        }
      }
    }
    
    console.log(`\n====== CORRE√á√ÉO CONCLU√çDA ======`);
    console.log(`‚úÖ ${corrigidas} an√°lises corrigidas de ${analises.length} verificadas`);
    
    // Desconectar do MongoDB
    await mongoose.disconnect();
    console.log('üëã Desconectado do MongoDB');
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir an√°lises:', error);
    await mongoose.disconnect();
    process.exit(1);
  }
}
