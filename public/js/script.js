document.addEventListener('DOMContentLoaded', () => {
  'use strict';
  
  // ===== IMPORTA√á√ÉO DOS M√ìDULOS =====
  const Utils = window.AppModules.Utils;
  const Progress = window.AppModules.Progress;
  const Auth = window.AppModules.Auth;
  const Clients = window.AppModules.Clients;
  const Analysis = window.AppModules.Analysis;
  const Transcriptions = window.AppModules.Transcriptions;
  const ActionPlans = window.AppModules.ActionPlans;
  const Mockups = window.AppModules.Mockups;
  const Gallery = window.AppModules.Gallery;
  const ImageEditor = window.AppModules.ImageEditor;
  const ArtisticStyle = window.AppModules.ArtisticStyle;
  const ActiveProcesses = window.AppModules.ActiveProcesses;
  
  // ===== VARI√ÅVEIS DE ESTADO GLOBAL =====
  window.currentClientId = null;
  window.currentUser = null;
  
  // ===== FUN√á√ÉO UTILIT√ÅRIA PARA REQUISI√á√ïES SEGURAS =====
  
  // Fun√ß√£o para fazer requisi√ß√µes de forma segura, tratando redirects de autentica√ß√£o
  async function safeFetch(url, options = {}) {
    try {
      // Verificar se √© uma rota de planos de a√ß√£o (sem verifica√ß√£o de auth)
      const isActionPlanRoute = url.includes('/api/planos-acao');
      
      // Garantir que headers corretos sejam enviados para requisi√ß√µes AJAX
      const defaultHeaders = {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      };
      
      // Mesclar headers padr√£o com os fornecidos
      const headers = { ...defaultHeaders, ...(options.headers || {}) };
      
      // Se for FormData, remover Content-Type para deixar o browser definir
      if (options.body instanceof FormData) {
        delete headers['Content-Type'];
      }
      
      const response = await fetch(url, {
        ...options,
        headers
      });
      
      // Para rotas de planos de a√ß√£o, n√£o verificar autentica√ß√£o
      if (isActionPlanRoute) {
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({ error: `Erro HTTP ${response.status}` }));
          throw new Error(errorData.error || errorData.message || `Erro HTTP ${response.status}`);
        }
        return await response.json();
      }
      
      // Verificar o tipo de conte√∫do da resposta (apenas para outras rotas)
      const contentType = response.headers.get('content-type') || '';
      
      // Se a resposta n√£o for JSON, pode ser um redirect de autentica√ß√£o
      if (!contentType.includes('application/json')) {
        // Verificar se √© um redirect de autentica√ß√£o
        if (response.status === 302 || response.status === 401) {
          console.log('üîÑ Redirecionamento de autentica√ß√£o detectado, redirecionando para login...');
          window.location.href = '/login';
          return null;
        }
        
        // Se for outro tipo de erro, tentar obter texto da resposta
        const responseText = await response.text();
        
        // Se a resposta cont√©m HTML (provavelmente p√°gina de erro)
        if (responseText.includes('<!DOCTYPE') || responseText.includes('<html>')) {
          throw new Error('Sess√£o expirada. Redirecionando para login...');
        }
        
        // Caso contr√°rio, usar o texto como mensagem de erro
        throw new Error(responseText || `Erro HTTP ${response.status}`);
      }
      
      // Se chegou at√© aqui, a resposta √© JSON v√°lida
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || errorData.message || `Erro HTTP ${response.status}`);
      }
      
      return await response.json();
      
    } catch (error) {
      // Para rotas de planos de a√ß√£o, n√£o redirecionar para login
      if (url.includes('/api/planos-acao')) {
        throw error;
      }
      
      // Se o erro menciona sess√£o expirada, redirecionar para login
      if (error.message.includes('Sess√£o expirada') || error.message.includes('Unexpected token')) {
        console.log('üîÑ Erro de parsing JSON detectado, redirecionando para login...');
        window.location.href = '/login';
        return null;
      }
      
      // Re-lan√ßar outros erros
      throw error;
    }
  }
  
  // ===== FUN√á√ÉO UTILIT√ÅRIA PARA SCROLL AUTOM√ÅTICO =====
  
  // Fun√ß√£o para fazer scroll suave para um elemento
  function scrollToElement(elementId, behavior = 'smooth', block = 'start') {
    const element = document.getElementById(elementId);
    if (element) {
      // Pequeno delay para garantir que o elemento esteja vis√≠vel
      setTimeout(() => {
        element.scrollIntoView({ 
          behavior: behavior, 
          block: block,
          inline: 'nearest'
        });
      }, 100);
    }
  }
  
  // ===== GERENCIAMENTO DE ESTADO DAS SE√á√ïES =====
  
  // Fun√ß√£o para mostrar apenas uma se√ß√£o por vez (estado exclusivo)
  function showOnlySection(targetSectionId) {
    // Lista de todas as se√ß√µes principais que devem ser mutuamente exclusivas
    const allSections = [
      'welcome-container',
      'analysis-container', 
      'transcription-container',
      'transcription-result-container',
      'action-plan-container',
      'action-plan-result-container',
      'result-container',
      'loading-container',
      'error-container'
    ];
    
    // Esconder todas as se√ß√µes usando classes CSS
    allSections.forEach(sectionId => {
      const section = document.getElementById(sectionId);
      if (section) {
        section.classList.add('hidden');
      }
    });
    
    // Mostrar apenas a se√ß√£o alvo usando classes CSS
    const targetSection = document.getElementById(targetSectionId);
    if (targetSection) {
      targetSection.classList.remove('hidden');
    }
  }
  
  // ===== FUN√á√ÉO DE INICIALIZA√á√ÉO PRINCIPAL =====
  
  // Fun√ß√£o principal de inicializa√ß√£o
  function init() {
    console.log('üöÄ Inicializando aplica√ß√£o...');
    
    // Verificar autentica√ß√£o
    Auth.checkAuthentication();
    
    // Inicializar gerenciador de processos ativos
    const activeProcessesManager = new ActiveProcesses.ActiveProcessesManager();
    window.activeProcessesManager = activeProcessesManager;
    
    // Inicializar m√≥dulos
    Clients.init();
    Analysis.init();
    Transcriptions.init();
    ActionPlans.init();
    Mockups.init();
    Gallery.init();
    ImageEditor.init();
    ArtisticStyle.init();
    
    // Configurar abas
    setupClientTabs();
    
    // Mostrar tela de boas-vindas
    showOnlySection('welcome-container');
    
    console.log('‚úÖ Aplica√ß√£o inicializada com sucesso!');
  }
  
  // ===== FUN√á√ïES PARA GERENCIAMENTO DE ABAS =====
  
  // Configurar abas de cliente (an√°lises/transcri√ß√µes/etc)
  function setupClientTabs() {
    const tabButtons = document.querySelectorAll('.tab-button');
    
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remover classe active de todos os bot√µes e conte√∫dos
        tabButtons.forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(content => {
          content.classList.remove('active');
        });
        
        // Adicionar classe active ao bot√£o clicado
        button.classList.add('active');
        
        // Mostrar conte√∫do correspondente
        const tabName = button.getAttribute('data-tab');
        document.getElementById(`${tabName}-tab`).classList.add('active');
        
        // Disparar evento de mudan√ßa de aba
        document.dispatchEvent(new CustomEvent('tab-changed', {
          detail: { tabId: tabName }
        }));
      });
    });
  }
  
  // ===== INICIALIZA√á√ÉO DA APLICA√á√ÉO =====
  
  // Adicionar listener para o evento de autentica√ß√£o bem-sucedida
  document.addEventListener('auth-success', (event) => {
    console.log('üîÑ Evento auth-success recebido, carregando clientes...');
    
    // Pequeno atraso para garantir que todos os m√≥dulos estejam inicializados
    setTimeout(() => {
      // Carregar clientes ap√≥s autentica√ß√£o bem-sucedida
      if (Clients && typeof Clients.loadClients === 'function') {
        console.log('üîÑ Carregando lista de clientes ap√≥s autentica√ß√£o...');
        Clients.loadClients().then(clients => {
          console.log(`‚úÖ ${clients?.length || 0} clientes carregados com sucesso`);
        }).catch(error => {
          console.error('‚ùå Erro ao carregar clientes ap√≥s autentica√ß√£o:', error);
        });
      } else {
        console.error('‚ùå M√≥dulo Clients n√£o dispon√≠vel ou m√©todo loadClients n√£o encontrado');
      }
    }, 500);
  });
  
  // Inicializar a aplica√ß√£o
  init();
});
